version: "3.7"
services:
  api:
    build:
      context: ./Bablomet.API
      network: host
    env_file:
      - .env
    ports:
      - 5001:5001
    restart: always
    depends_on:
      marketdata:
        condition: service_healthy
      kafka:
        condition: service_healthy
      database:
        condition: service_started

  marketdata:
    build:
      context: ./Bablomet.Marketdata
      network: host
    env_file:
      - .env
    ports:
      - 5000:5000
    restart: always
    depends_on: 
      kafka:
        condition: service_healthy
      database:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/diagnostic/health"]
      interval: 10s
      timeout: 60s
      retries: 5

  telegram-bot:
    build:
      context: ./Bablomet.PRO.Telegram
      network: host
    env_file:
      - .env
    restart: always
    depends_on:
      api:
        condition: service_started
      kafka:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 10000
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
      KAFKA_HEAP_OPTS: -Xms512m -Xmx2g
    healthcheck:
      test: nc -z 127.0.0.1 29092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    restart: always

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - "kafka"

  database:
    build: 
      context: ./database
    ports:
      - 5432:5432
    env_file:
      - .env
    restart: always
    volumes:
      - ./data:/var/lib/postgresql